<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YanLib</name>
    </assembly>
    <members>
        <member name="T:YanLib.Core.RuntimeConfig">
            <summary>
            运行时候的配置
            </summary>
        </member>
        <member name="T:YanLib.Settings">
            <summary>
            Mod设置类
            </summary>
        </member>
        <member name="F:YanLib.Settings.Hotkey">
            <summary>
            快捷键设置
            </summary>
        </member>
        <member name="T:YanLib.Settings.HotkeyConfig">
            <summary>
            快捷键设置类
            </summary>
        </member>
        <member name="F:YanLib.Settings.HotkeyConfig.OpenUI">
            <summary>
            打开/关闭 UI 的快捷键
            </summary>
        </member>
        <member name="M:YanLib.Settings.Init">
            <summary>
            加载配置
            </summary>
        </member>
        <member name="T:YanLib.YanLib">
            <summary>
            Mod 入口
            </summary>
        </member>
        <member name="F:YanLib.YanLib.Version">
            <summary>版本</summary>
        </member>
        <member name="F:YanLib.YanLib.GUID">
            <summary>GUID</summary>
        </member>
        <member name="F:YanLib.YanLib.Logger">
            <summary>日志</summary>
        </member>
        <member name="F:YanLib.YanLib.Settings">
            <summary>Yan Lib 的设置</summary>
        </member>
        <member name="F:YanLib.YanLib.DebugMode">
            <summary>
            Debug 模式
            </summary>
        </member>
        <member name="F:YanLib.YanLib.ToggleUI">
            <summary>
            开/关 UI
            </summary>
        </member>
        <member name="M:YanLib.YanLib.Initialize">
            <summary>
            Mod 初始化
            </summary>
        </member>
        <member name="M:YanLib.YanLib.Dispose">
            <summary>
            禁用 Mod 的时候调用
            </summary>
        </member>
        <member name="T:YanLib.MGOInfoAttribute">
            <summary>
            用来标记界面的位置的
            </summary>
        </member>
        <member name="F:YanLib.MGOInfoAttribute.Name">
            <summary>
            名字
            </summary>
        </member>
        <member name="F:YanLib.MGOInfoAttribute.Order">
            <summary>
            位置
            </summary>
        </member>
        <member name="F:YanLib.MGOInfoAttribute.InitType">
            <summary>
            界面初始化的类
            </summary>
        </member>
        <member name="F:YanLib.MGOInfoAttribute.InitTypeName">
            <summary>
            初始化的函数名字
            </summary>
        </member>
        <member name="T:YanLib.PatchHandler">
            <summary>
            Patch 用的
            </summary>
        </member>
        <member name="F:YanLib.PatchHandler.TargetType">
            <summary>
            Parch 的目标 Type
            </summary>
        </member>
        <member name="F:YanLib.PatchHandler.TargetMethonName">
            <summary>
            Parch 的目标函数
            </summary>
        </member>
        <member name="F:YanLib.PatchHandler.Prefix">
            <summary>
            前置
            </summary>
        </member>
        <member name="F:YanLib.PatchHandler.Postfix">
            <summary>
            后置
            </summary>
        </member>
        <member name="F:YanLib.PatchHandler.Transpiler">
            <summary>
            IL修改的
            </summary>
        </member>
        <member name="M:YanLib.PatchHandler.Patch(HarmonyLib.Harmony)">
            <summary>
            Patch
            </summary>
            <param name="harmony">Harmony 实例</param>
        </member>
        <member name="M:YanLib.PatchHandler.Unpatch(HarmonyLib.Harmony,YanLib.PatchHandler.HarmonyPatchType)">
            <summary>
            取消 Patch
            </summary>
            <param name="harmony">Harmony 实例</param>
            <param name="patchType">卸载的 Patch 类型</param>
        </member>
        <member name="T:YanLib.PatchHandler.HarmonyPatchType">
            <summary>
            Patch 类型
            </summary>
        </member>
        <member name="F:YanLib.PatchHandler.HarmonyPatchType.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="F:YanLib.PatchHandler.HarmonyPatchType.Prefix">
            <summary>
            前置
            </summary>
        </member>
        <member name="F:YanLib.PatchHandler.HarmonyPatchType.Postfix">
            <summary>
            后置
            </summary>
        </member>
        <member name="F:YanLib.PatchHandler.HarmonyPatchType.Transpiler">
            <summary>
            Transpiler
            </summary>
        </member>
        <member name="T:YanLib.ModHelper.ConfigDefinition">
            <summary>
            Definitions with same section and key are equal.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigDefinition.#ctor(System.String,System.String)">
            <summary>
                Create a new definition. Definitions with same section and key are equal.
            </summary>
            <param name="section">Group of the setting, case sensitive.</param>
            <param name="key">Name of the setting, case sensitive.</param>
        </member>
        <member name="P:YanLib.ModHelper.ConfigDefinition.Section">
            <summary>
                Group of the setting. All settings within a config file are grouped by this.
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigDefinition.Key">
            <summary>
                Name of the setting.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigDefinition.Equals(YanLib.ModHelper.ConfigDefinition)">
            <summary>
                Check if the definitions are the same.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:YanLib.ModHelper.ConfigDefinition.Equals(System.Object)">
            <summary>
                Check if the definitions are the same.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigDefinition.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:YanLib.ModHelper.ConfigDefinition.op_Equality(YanLib.ModHelper.ConfigDefinition,YanLib.ModHelper.ConfigDefinition)">
            <summary>
                Check if the definitions are the same.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigDefinition.op_Inequality(YanLib.ModHelper.ConfigDefinition,YanLib.ModHelper.ConfigDefinition)">
            <summary>
                Check if the definitions are the same.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigDefinition.ToString">
            <inheritdoc />
        </member>
        <member name="T:YanLib.ModHelper.ConfigDescription">
            <summary>
                Metadata of a <see cref="T:YanLib.ModHelper.ConfigEntryBase" />.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigDescription.#ctor(System.String,YanLib.ModHelper.AcceptableValueBase,System.Object[])">
            <summary>
                Create a new description.
            </summary>
            <param name="description">Text describing the function of the setting and any notes or warnings.</param>
            <param name="acceptableValues">
                Range of values that this setting can take. The setting's value will be automatically
                clamped.
            </param>
            <param name="tags">Objects that can be used by user-made classes to add functionality.</param>
        </member>
        <member name="P:YanLib.ModHelper.ConfigDescription.Description">
            <summary>
                Text describing the function of the setting and any notes or warnings.
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigDescription.AcceptableValues">
            <summary>
                Range of acceptable values for a setting.
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigDescription.Tags">
            <summary>
                Objects that can be used by user-made classes to add functionality.
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigDescription.Empty">
            <summary>
                An empty description.
            </summary>
        </member>
        <member name="T:YanLib.ModHelper.AcceptableValueBase">
            <summary>
                Base type of all classes representing and enforcing acceptable values of config settings.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.AcceptableValueBase.#ctor(System.Type)">
            <param name="valueType">Type of values that this class can Clamp.</param>
        </member>
        <member name="P:YanLib.ModHelper.AcceptableValueBase.ValueType">
            <summary>
                Type of the supported values.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.AcceptableValueBase.Clamp(System.Object)">
            <summary>
                Change the value to be acceptable, if it's not already.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.AcceptableValueBase.IsValid(System.Object)">
            <summary>
                Check if the value is an acceptable value.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.AcceptableValueBase.ToDescriptionString">
            <summary>
                Get the string for use in config files.
            </summary>
        </member>
        <member name="T:YanLib.ModHelper.ConfigEntry`1">
            <summary>
                Provides access to a single setting inside of a <see cref="T:YanLib.ModHelper.ConfigFile" />.
            </summary>
            <typeparam name="T">Type of the setting.</typeparam>
        </member>
        <member name="P:YanLib.ModHelper.ConfigEntry`1.Value">
            <summary>
                Value of this setting.
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigEntry`1.BoxedValue">
            <inheritdoc />
        </member>
        <member name="E:YanLib.ModHelper.ConfigEntry`1.SettingChanged">
            <summary>
                Fired when the setting is changed. Does not detect changes made outside from this object.
            </summary>
        </member>
        <member name="T:YanLib.ModHelper.ConfigEntryBase">
            <summary>
                Container for a single setting of a <see cref="P:YanLib.ModHelper.ConfigEntryBase.ConfigFile" />.
                Each config entry is linked to one config file.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigEntryBase.#ctor(YanLib.ModHelper.ConfigFile,YanLib.ModHelper.ConfigDefinition,System.Type,System.Object,YanLib.ModHelper.ConfigDescription)">
            <summary>
                Types of defaultValue and definition.AcceptableValues have to be the same as settingType.
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigEntryBase.ConfigFile">
            <summary>
                Config file this entry is a part of.
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigEntryBase.Definition">
            <summary>
                Category and name of this setting. Used as a unique key for identification within a
                <see cref="P:YanLib.ModHelper.ConfigEntryBase.ConfigFile" />.
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigEntryBase.Description">
            <summary>
                Description / metadata of this setting.
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigEntryBase.SettingType">
            <summary>
                Type of the <see cref="P:YanLib.ModHelper.ConfigEntryBase.BoxedValue" /> that this setting holds.
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigEntryBase.DefaultValue">
            <summary>
                Default value of this setting (set only if the setting was not changed before).
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigEntryBase.BoxedValue">
            <summary>
                Get or set the value of the setting.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigEntryBase.ClampValue``1(``0)">
            <summary>
                If necessary, clamp the value to acceptable value range. T has to be equal to settingType.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigEntryBase.OnSettingChanged(System.Object)">
            <summary>
                Trigger setting changed event.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigEntryBase.SetSerializedValue(System.String)">
            <summary>
                Set the value by using its serialized form.
            </summary>
            <param name="value">Json Text</param>
        </member>
        <member name="M:YanLib.ModHelper.ConfigEntryBase.GetSerializedValue">
            <summary>
                Get the serialized representation of the value.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigEntryBase.WriteDescription(System.IO.StreamWriter)">
            <summary>
                Write a description of this setting using all available metadata.
            </summary>
        </member>
        <member name="T:YanLib.ModHelper.ConfigFile">
            <summary>
                配置文件。
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.#ctor(System.String,System.Boolean)">
            <inheritdoc cref="M:YanLib.ModHelper.ConfigFile.#ctor(System.String,System.Boolean,YanLib.ModHelper.ModHelper)" />
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.#ctor(System.String,System.Boolean,YanLib.ModHelper.ModHelper)">
            <summary>
                Create a new config file at the specified config path.
            </summary>
            <param name="configPath">Full path to a file that contains settings. The file will be created as needed.</param>
            <param name="saveOnInit">If the config file/directory doesn't exist, create it immediately.</param>
            <param name="ownerMetadata">Information about the plugin that owns this setting file.</param>
        </member>
        <member name="P:YanLib.ModHelper.ConfigFile.CoreConfig">
            <summary>
                System Config
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigFile.Entries">
            <summary>
                All config entries inside
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigFile.ConfigFilePath">
            <summary>
                Full path to the config file. The file might not exist until a setting is added and changed, or <see cref="M:YanLib.ModHelper.ConfigFile.Save" />
                is called.
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigFile.SaveOnConfigSet">
            <summary>
                If enabled, writes the config to disk every time a value is set.
                If disabled, you have to manually use <see cref="M:YanLib.ModHelper.ConfigFile.Save" /> or the changes will be lost!
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigFile.Item(YanLib.ModHelper.ConfigDefinition)">
            <inheritdoc />
        </member>
        <member name="P:YanLib.ModHelper.ConfigFile.Item(System.String,System.String)">
            <summary>
            </summary>
            <param name="section"></param>
            <param name="key"></param>
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.Contains(System.Collections.Generic.KeyValuePair{YanLib.ModHelper.ConfigDefinition,YanLib.ModHelper.ConfigEntryBase})">
            <inheritdoc />
        </member>
        <member name="P:YanLib.ModHelper.ConfigFile.Count">
            <inheritdoc />
        </member>
        <member name="P:YanLib.ModHelper.ConfigFile.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.ContainsKey(YanLib.ModHelper.ConfigDefinition)">
            <inheritdoc />
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.Add(YanLib.ModHelper.ConfigDefinition,YanLib.ModHelper.ConfigEntryBase)">
            <inheritdoc />
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.Remove(YanLib.ModHelper.ConfigDefinition)">
            <inheritdoc />
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.Clear">
            <inheritdoc />
        </member>
        <member name="P:YanLib.ModHelper.ConfigFile.System#Collections#Generic#IDictionary{YanLib#ModHelper#ConfigDefinition,YanLib#ModHelper#ConfigEntryBase}#Item(YanLib.ModHelper.ConfigDefinition)">
            <inheritdoc />
        </member>
        <member name="P:YanLib.ModHelper.ConfigFile.Keys">
            <summary>
                Returns the ConfigDefinitions that the ConfigFile contains.
                <para>Creates a new array when the property is accessed. Thread-safe.</para>
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigFile.Values">
            <summary>
                Returns the ConfigEntryBase values that the ConfigFile contains.
                <para>Creates a new array when the property is accessed. Thread-safe.</para>
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ConfigFile.GenerateSettingDescriptions">
            <summary>
                Generate user-readable comments for each of the settings in the saved .json file.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.Reload">
            <summary>
                Reloads the config from disk. Unsaved changes are lost.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.Save">
            <summary>
                Writes the config to disk.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.TryGetEntry``1(YanLib.ModHelper.ConfigDefinition,YanLib.ModHelper.ConfigEntry{``0}@)">
            <summary>
                Access one of the existing settings. If the setting has not been added yet, false is returned. Otherwise, true.
                If the setting exists but has a different type than T, an exception is thrown.
                New settings should be added with
                <see cref="M:YanLib.ModHelper.ConfigFile.Bind``1(YanLib.ModHelper.ConfigDefinition,``0,YanLib.ModHelper.ConfigDescription)" />.
            </summary>
            <typeparam name="T">Type of the value contained in this setting.</typeparam>
            <param name="configDefinition">Section and Key of the setting.</param>
            <param name="entry">The ConfigEntry value to return.</param>
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.TryGetEntry``1(System.String,System.String,YanLib.ModHelper.ConfigEntry{``0}@)">
            <summary>
                Access one of the existing settings. If the setting has not been added yet, null is returned.
                If the setting exists but has a different type than T, an exception is thrown.
                New settings should be added with
                <see cref="M:YanLib.ModHelper.ConfigFile.Bind``1(YanLib.ModHelper.ConfigDefinition,``0,YanLib.ModHelper.ConfigDescription)" />.
            </summary>
            <typeparam name="T">Type of the value contained in this setting.</typeparam>
            <param name="section">Section/category/group of the setting. Settings are grouped by this.</param>
            <param name="key">Name of the setting.</param>
            <param name="entry">The ConfigEntry value to return.</param>
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.Bind``1(YanLib.ModHelper.ConfigDefinition,``0,YanLib.ModHelper.ConfigDescription)">
            <summary>
                Create a new setting. The setting is saved to drive and loaded automatically.
                Each definition can be used to add only one setting, trying to add a second setting will throw an exception.
            </summary>
            <typeparam name="T">Type of the value contained in this setting.</typeparam>
            <param name="configDefinition">Section and Key of the setting.</param>
            <param name="defaultValue">Value of the setting if the setting was not created yet.</param>
            <param name="configDescription">Description of the setting shown to the user and other metadata.</param>
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.Bind``1(System.String,System.String,``0,YanLib.ModHelper.ConfigDescription)">
            <summary>
                Create a new setting. The setting is saved to drive and loaded automatically.
                Each section and key pair can be used to add only one setting, trying to add a second setting will throw an
                exception.
            </summary>
            <typeparam name="T">Type of the value contained in this setting.</typeparam>
            <param name="section">Section/category/group of the setting. Settings are grouped by this.</param>
            <param name="key">Name of the setting.</param>
            <param name="defaultValue">Value of the setting if the setting was not created yet.</param>
            <param name="configDescription">Description of the setting shown to the user and other metadata.</param>
        </member>
        <member name="M:YanLib.ModHelper.ConfigFile.Bind``1(System.String,System.String,``0,System.String)">
            <summary>
                Create a new setting. The setting is saved to drive and loaded automatically.
                Each section and key pair can be used to add only one setting, trying to add a second setting will throw an
                exception.
            </summary>
            <typeparam name="T">Type of the value contained in this setting.</typeparam>
            <param name="section">Section/category/group of the setting. Settings are grouped by this.</param>
            <param name="key">Name of the setting.</param>
            <param name="defaultValue">Value of the setting if the setting was not created yet.</param>
            <param name="description">Simple description of the setting shown to the user.</param>
        </member>
        <member name="E:YanLib.ModHelper.ConfigFile.ConfigReloaded">
            <summary>
                An event that is fired every time the config is reloaded.
            </summary>
        </member>
        <member name="E:YanLib.ModHelper.ConfigFile.SettingChanged">
            <summary>
                Fired when one of the settings is changed.
            </summary>
        </member>
        <member name="T:YanLib.ModHelper.KeyboardShortcut">
            <summary>
                A keyboard shortcut that can be used in Update method to check if user presses a key combo. The shortcut is only
                triggered when the user presses the exact combination. For example, <c>F + LeftCtrl</c> will trigger only if user
                presses and holds only LeftCtrl, and then presses F. If any other keys are pressed, the shortcut will not trigger.
                How to use: Use <see cref="M:YanLib.ModHelper.KeyboardShortcut.IsDown" /> in this class instead of <see cref="M:UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode)" /> in the
                Update loop.
            </summary>
        </member>
        <member name="F:YanLib.ModHelper.KeyboardShortcut.Empty">
            <summary>
                Shortcut that never triggers.
            </summary>
        </member>
        <member name="F:YanLib.ModHelper.KeyboardShortcut.AllKeyCodes">
            <summary>
                All KeyCode values that can be used in a keyboard shortcut.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.KeyboardShortcut.#ctor(UnityEngine.KeyCode,UnityEngine.KeyCode[])">
            <summary>
                Create a new keyboard shortcut.
            </summary>
            <param name="mainKey">Main key to press</param>
            <param name="modifiers">Keys that should be held down before main key is registered</param>
        </member>
        <member name="P:YanLib.ModHelper.KeyboardShortcut.MainKey">
            <summary>
                Main key of the key combination. It has to be pressed / let go last for the combination to be triggered.
                If the combination is empty, <see cref="F:UnityEngine.KeyCode.None" /> is returned.
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.KeyboardShortcut.Modifiers">
            <summary>
                Modifiers of the key combination, if any.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.KeyboardShortcut.Deserialize(System.String)">
            <summary>
                Attempt to deserialize key combination from the string.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.KeyboardShortcut.Serialize">
            <summary>
                Serialize the key combination into a user readable string.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.KeyboardShortcut.IsDown">
            <summary>
                Check if the main key was just pressed (Input.GetKeyDown), and specified modifier keys are all pressed
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.KeyboardShortcut.IsPressed">
            <summary>
                Check if the main key is currently held down (Input.GetKey), and specified modifier keys are all pressed
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.KeyboardShortcut.IsUp">
            <summary>
                Check if the main key was just lifted (Input.GetKeyUp), and specified modifier keys are all pressed.
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.KeyboardShortcut.ToString">
            <inheritdoc />
        </member>
        <member name="M:YanLib.ModHelper.KeyboardShortcut.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:YanLib.ModHelper.KeyboardShortcut.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:YanLib.ModHelper.ModHelper">
            <summary>
            用来方便 Mod 工作的
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ModHelper.GUID">
            <summary>
                Mod 的 GUID
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ModHelper.Name">
            <summary>
                Mod 的名字
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ModHelper.Version">
            <summary>
                Mod 的版本
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ModHelper.Config">
            <summary>
                配置文件
            </summary>
        </member>
        <member name="P:YanLib.ModHelper.ModHelper.SettingUI">
            <summary>
                Mod 的设置 UI
            </summary>
        </member>
        <member name="F:YanLib.ModHelper.ModHelper.OnUpdate">
            <summary>
                在 Unity Update 中调用
            </summary>
        </member>
        <member name="M:YanLib.ModHelper.ModHelper.#ctor(System.String,System.String)">
            <summary>
            新建 ModHelper 实例
            </summary>
            <param name="_GUID">Mod 的 GUID</param>
            <param name="ModName">Mod 显示的名字</param>
        </member>
        <member name="M:YanLib.ModHelper.ModHelper.AddKeyboardShortcutListener(YanLib.ModHelper.KeyboardShortcut,System.Action)">
            <summary>
            添加监听的快捷键，全局有效
            </summary>
            <param name="shortcut">快捷键</param>
            <param name="action">回调函数</param>
            <returns>false 是添加失败，true 则为添加成功</returns>
        </member>
        <member name="T:YanLib.ModHelper.SettingChangedEventArgs">
            <summary>
                Arguments for events concerning a change of a setting.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:YanLib.ModHelper.SettingChangedEventArgs.#ctor(YanLib.ModHelper.ConfigEntryBase)">
            <inheritdoc />
        </member>
        <member name="P:YanLib.ModHelper.SettingChangedEventArgs.ChangedSetting">
            <summary>
                Setting that was changed
            </summary>
        </member>
        <member name="T:YanLib.UI.SettingUI">
            <summary>
            设置界面的 UI
            </summary>
        </member>
        <member name="M:YanLib.UI.SettingUI.PrepareGUI">
            <summary>
            初始化UI
            </summary>
        </member>
    </members>
</doc>
